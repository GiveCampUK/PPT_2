//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ApplicationDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::ApplicationData.Implementation.ApplicationDataObjectContext>
    {
    
        public ApplicationDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region Contacts
    
        public void InsertContacts(global::ApplicationData.Implementation.Contacts entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ContactsSet.AddObject(entity);
            }
        }
    
        public void UpdateContacts(global::ApplicationData.Implementation.Contacts currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ContactsSet, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteContacts(global::ApplicationData.Implementation.Contacts entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ContactsSet.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region ContactTypes
    
        public void InsertContactTypes(global::ApplicationData.Implementation.ContactTypes entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ContactTypesSet.AddObject(entity);
            }
        }
    
        public void UpdateContactTypes(global::ApplicationData.Implementation.ContactTypes currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ContactTypesSet, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteContactTypes(global::ApplicationData.Implementation.ContactTypes entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ContactTypesSet.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Countries
    
        public void InsertCountries(global::ApplicationData.Implementation.Countries entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.CountriesSet.AddObject(entity);
            }
        }
    
        public void UpdateCountries(global::ApplicationData.Implementation.Countries currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.CountriesSet, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCountries(global::ApplicationData.Implementation.Countries entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.CountriesSet.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Prisoner
    
        public void InsertPrisoner(global::ApplicationData.Implementation.Prisoner entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Prisoners.AddObject(entity);
            }
        }
    
        public void UpdatePrisoner(global::ApplicationData.Implementation.Prisoner currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Prisoners, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeletePrisoner(global::ApplicationData.Implementation.Prisoner entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Prisoners.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> ContactsSet_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Contacts>("ContactsSet_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> ContactsSet_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Contacts>("ContactsSet_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> ContactsSet_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Contacts>("ContactsSet_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ContactTypes> ContactTypesSet_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.ContactTypes>("ContactTypesSet_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ContactTypes> ContactTypesSet_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.ContactTypes>("ContactTypesSet_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ContactTypes> ContactTypesSet_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.ContactTypes>("ContactTypesSet_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Countries> CountriesSet_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Countries>("CountriesSet_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Countries> CountriesSet_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Countries>("CountriesSet_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Countries> CountriesSet_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Countries>("CountriesSet_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Prisoner> Prisoners_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Prisoner>("Prisoners_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Prisoner> Prisoners_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> ContactId)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Prisoner>("Prisoners_SingleOrDefault", frameworkOperators, ContactId);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Prisoner> Prisoners_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Prisoner>("Prisoners_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> SearchByLastName(string frameworkOperators, string LastName)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Contacts>("SearchByLastName", frameworkOperators, LastName);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().ApplicationData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ApplicationDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::ApplicationData.Implementation.ApplicationDataObjectContext>
    {
        public ApplicationDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> ContactsSet_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Contacts>("ContactsSet_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> ContactsSet_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Contacts>("ContactsSet_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> ContactsSet_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.Contacts>("[ContactsSet]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ContactTypes> ContactTypesSet_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.ContactTypes> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.ContactTypes>("ContactTypesSet_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ContactTypes> ContactTypesSet_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.ContactTypes> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.ContactTypes>("ContactTypesSet_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ContactTypes> ContactTypesSet_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.ContactTypes> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.ContactTypes>("[ContactTypesSet]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Countries> CountriesSet_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Countries> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Countries>("CountriesSet_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Countries> CountriesSet_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Countries> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Countries>("CountriesSet_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Countries> CountriesSet_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Countries> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.Countries>("[CountriesSet]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Prisoner> Prisoners_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Prisoner> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Prisoner>("Prisoners_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Prisoner> Prisoners_SingleOrDefault(global::System.Nullable<int> ContactId)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Prisoner> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Prisoner>("Prisoners_All"),
                (p) => (ContactId.HasValue && (p.Id == ContactId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Prisoner> Prisoners_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Prisoner> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.Prisoner>("[Prisoners]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> SearchByLastName(string LastName)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Contacts> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Contacts>("ContactsSet_All"),
                (c) => (c.LastName.CompareTo(LastName) == 0));
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::ApplicationData.Implementation.Contacts))
            {
                return new global::ApplicationData.Implementation.Contacts();
            }
            if (type == typeof(global::ApplicationData.Implementation.ContactTypes))
            {
                return new global::ApplicationData.Implementation.ContactTypes();
            }
            if (type == typeof(global::ApplicationData.Implementation.Countries))
            {
                return new global::ApplicationData.Implementation.Countries();
            }
            if (type == typeof(global::ApplicationData.Implementation.Prisoner))
            {
                return new global::ApplicationData.Implementation.Prisoner();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::ApplicationData.Implementation.ApplicationDataObjectContext CreateObjectContext()
        {
            return new global::ApplicationData.Implementation.ApplicationDataObjectContext(base.GetEntityConnectionString(
                "_IntrinsicData", 
                "res://*/ApplicationData.csdl|res://*/ApplicationData.ssdl|res://*/ApplicationData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Contacts))
            {
                return new global::ApplicationData.Implementation.Contacts();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ContactTypes))
            {
                return new global::ApplicationData.Implementation.ContactTypes();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Countries))
            {
                return new global::ApplicationData.Implementation.Countries();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Prisoner))
            {
                return new global::ApplicationData.Implementation.Prisoner();
            }
            return null;
        }
    
    #endregion
    
    }
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class PPTDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::PPTData.Implementation.PPTDataObjectContext>
    {
    
        public PPTDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region Accreditation
    
        public void InsertAccreditation(global::PPTData.Implementation.Accreditation entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Accreditations.AddObject(entity);
            }
        }
    
        public void UpdateAccreditation(global::PPTData.Implementation.Accreditation currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Accreditations, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteAccreditation(global::PPTData.Implementation.Accreditation entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Accreditations.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region c_Class
    
        public void Insertc_Class(global::PPTData.Implementation.c_Class entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Classes.AddObject(entity);
            }
        }
    
        public void Updatec_Class(global::PPTData.Implementation.c_Class currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Classes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void Deletec_Class(global::PPTData.Implementation.c_Class entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Classes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Contact
    
        public void InsertContact(global::PPTData.Implementation.Contact entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Contacts.AddObject(entity);
            }
        }
    
        public void UpdateContact(global::PPTData.Implementation.Contact currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Contacts, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteContact(global::PPTData.Implementation.Contact entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Contacts.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Corresp
    
        public void InsertCorresp(global::PPTData.Implementation.Corresp entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Corresps.AddObject(entity);
            }
        }
    
        public void UpdateCorresp(global::PPTData.Implementation.Corresp currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Corresps, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCorresp(global::PPTData.Implementation.Corresp entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Corresps.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Country
    
        public void InsertCountry(global::PPTData.Implementation.Country entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Countries.AddObject(entity);
            }
        }
    
        public void UpdateCountry(global::PPTData.Implementation.Country currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Countries, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCountry(global::PPTData.Implementation.Country entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Countries.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Destination
    
        public void InsertDestination(global::PPTData.Implementation.Destination entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Destinations.AddObject(entity);
            }
        }
    
        public void UpdateDestination(global::PPTData.Implementation.Destination currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Destinations, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteDestination(global::PPTData.Implementation.Destination entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Destinations.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Gift
    
        public void InsertGift(global::PPTData.Implementation.Gift entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Gifts.AddObject(entity);
            }
        }
    
        public void UpdateGift(global::PPTData.Implementation.Gift currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Gifts, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteGift(global::PPTData.Implementation.Gift entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Gifts.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region GiftType
    
        public void InsertGiftType(global::PPTData.Implementation.GiftType entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.GiftTypes.AddObject(entity);
            }
        }
    
        public void UpdateGiftType(global::PPTData.Implementation.GiftType currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.GiftTypes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteGiftType(global::PPTData.Implementation.GiftType entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.GiftTypes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region History
    
        public void InsertHistory(global::PPTData.Implementation.History entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Histories.AddObject(entity);
            }
        }
    
        public void UpdateHistory(global::PPTData.Implementation.History currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Histories, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteHistory(global::PPTData.Implementation.History entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Histories.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region InstitutionType
    
        public void InsertInstitutionType(global::PPTData.Implementation.InstitutionType entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.InstitutionTypes.AddObject(entity);
            }
        }
    
        public void UpdateInstitutionType(global::PPTData.Implementation.InstitutionType currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.InstitutionTypes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteInstitutionType(global::PPTData.Implementation.InstitutionType entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.InstitutionTypes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region LetterWriter
    
        public void InsertLetterWriter(global::PPTData.Implementation.LetterWriter entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.LetterWriters.AddObject(entity);
            }
        }
    
        public void UpdateLetterWriter(global::PPTData.Implementation.LetterWriter currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.LetterWriters, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteLetterWriter(global::PPTData.Implementation.LetterWriter entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.LetterWriters.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region LocationType
    
        public void InsertLocationType(global::PPTData.Implementation.LocationType entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.LocationTypes.AddObject(entity);
            }
        }
    
        public void UpdateLocationType(global::PPTData.Implementation.LocationType currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.LocationTypes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteLocationType(global::PPTData.Implementation.LocationType entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.LocationTypes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region MailCode
    
        public void InsertMailCode(global::PPTData.Implementation.MailCode entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.MailCodes.AddObject(entity);
            }
        }
    
        public void UpdateMailCode(global::PPTData.Implementation.MailCode currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.MailCodes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteMailCode(global::PPTData.Implementation.MailCode entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.MailCodes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region NLAddressOrderType
    
        public void InsertNLAddressOrderType(global::PPTData.Implementation.NLAddressOrderType entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.NLAddressOrderTypes.AddObject(entity);
            }
        }
    
        public void UpdateNLAddressOrderType(global::PPTData.Implementation.NLAddressOrderType currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.NLAddressOrderTypes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteNLAddressOrderType(global::PPTData.Implementation.NLAddressOrderType entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.NLAddressOrderTypes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region PersonType
    
        public void InsertPersonType(global::PPTData.Implementation.PersonType entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.PersonTypes.AddObject(entity);
            }
        }
    
        public void UpdatePersonType(global::PPTData.Implementation.PersonType currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.PersonTypes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeletePersonType(global::PPTData.Implementation.PersonType entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.PersonTypes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Prison
    
        public void InsertPrison(global::PPTData.Implementation.Prison entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Prisons.AddObject(entity);
            }
        }
    
        public void UpdatePrison(global::PPTData.Implementation.Prison currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Prisons, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeletePrison(global::PPTData.Implementation.Prison entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Prisons.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region PrisonSex
    
        public void InsertPrisonSex(global::PPTData.Implementation.PrisonSex entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.PrisonSexes.AddObject(entity);
            }
        }
    
        public void UpdatePrisonSex(global::PPTData.Implementation.PrisonSex currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.PrisonSexes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeletePrisonSex(global::PPTData.Implementation.PrisonSex entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.PrisonSexes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region PurposeType
    
        public void InsertPurposeType(global::PPTData.Implementation.PurposeType entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.PurposeTypes.AddObject(entity);
            }
        }
    
        public void UpdatePurposeType(global::PPTData.Implementation.PurposeType currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.PurposeTypes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeletePurposeType(global::PPTData.Implementation.PurposeType entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.PurposeTypes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region ResponseType
    
        public void InsertResponseType(global::PPTData.Implementation.ResponseType entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ResponseTypes.AddObject(entity);
            }
        }
    
        public void UpdateResponseType(global::PPTData.Implementation.ResponseType currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ResponseTypes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteResponseType(global::PPTData.Implementation.ResponseType entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ResponseTypes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region sysdiagram
    
        public void Insertsysdiagram(global::PPTData.Implementation.sysdiagram entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.sysdiagrams.AddObject(entity);
            }
        }
    
        public void Updatesysdiagram(global::PPTData.Implementation.sysdiagram currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.sysdiagrams, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void Deletesysdiagram(global::PPTData.Implementation.sysdiagram entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.sysdiagrams.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Title
    
        public void InsertTitle(global::PPTData.Implementation.Title entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Titles.AddObject(entity);
            }
        }
    
        public void UpdateTitle(global::PPTData.Implementation.Title currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Titles, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteTitle(global::PPTData.Implementation.Title entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Titles.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Town
    
        public void InsertTown(global::PPTData.Implementation.Town entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Towns.AddObject(entity);
            }
        }
    
        public void UpdateTown(global::PPTData.Implementation.Town currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Towns, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteTown(global::PPTData.Implementation.Town entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Towns.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region WorkshopPrison
    
        public void InsertWorkshopPrison(global::PPTData.Implementation.WorkshopPrison entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.WorkshopPrisons.AddObject(entity);
            }
        }
    
        public void UpdateWorkshopPrison(global::PPTData.Implementation.WorkshopPrison currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.WorkshopPrisons, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteWorkshopPrison(global::PPTData.Implementation.WorkshopPrison entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.WorkshopPrisons.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region WorkshopTeacher
    
        public void InsertWorkshopTeacher(global::PPTData.Implementation.WorkshopTeacher entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.WorkshopTeachers.AddObject(entity);
            }
        }
    
        public void UpdateWorkshopTeacher(global::PPTData.Implementation.WorkshopTeacher currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.WorkshopTeachers, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteWorkshopTeacher(global::PPTData.Implementation.WorkshopTeacher entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.WorkshopTeachers.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Accreditation> Accreditations_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Accreditation>("Accreditations_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Accreditation> Accreditations_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Accreditation>("Accreditations_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Accreditation> Accreditations_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.Accreditation>("Accreditations_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.c_Class> Classes_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.c_Class>("Classes_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.c_Class> Classes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.c_Class>("Classes_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.c_Class> Classes_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.c_Class>("Classes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Contact> Contacts_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Contact>("Contacts_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Contact> Contacts_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Contact>("Contacts_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Contact> Contacts_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.Contact>("Contacts_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Corresp> Corresps_Single(string frameworkOperators, global::System.Nullable<int> Corref)
        {
            return this.GetQuery<global::PPTData.Implementation.Corresp>("Corresps_Single", frameworkOperators, Corref);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Corresp> Corresps_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Corref)
        {
            return this.GetQuery<global::PPTData.Implementation.Corresp>("Corresps_SingleOrDefault", frameworkOperators, Corref);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Corresp> Corresps_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.Corresp>("Corresps_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Country> Countries_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Country>("Countries_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Country> Countries_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Country>("Countries_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Country> Countries_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.Country>("Countries_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Destination> Destinations_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Destination>("Destinations_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Destination> Destinations_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Destination>("Destinations_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Destination> Destinations_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.Destination>("Destinations_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Gift> Gifts_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Gift>("Gifts_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Gift> Gifts_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Gift>("Gifts_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Gift> Gifts_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.Gift>("Gifts_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.GiftType> GiftTypes_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.GiftType>("GiftTypes_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.GiftType> GiftTypes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.GiftType>("GiftTypes_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.GiftType> GiftTypes_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.GiftType>("GiftTypes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.History> Histories_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.History>("Histories_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.History> Histories_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.History>("Histories_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.History> Histories_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.History>("Histories_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.InstitutionType> InstitutionTypes_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.InstitutionType>("InstitutionTypes_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.InstitutionType> InstitutionTypes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.InstitutionType>("InstitutionTypes_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.InstitutionType> InstitutionTypes_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.InstitutionType>("InstitutionTypes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LetterWriter> LetterWriters_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.LetterWriter>("LetterWriters_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LetterWriter> LetterWriters_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.LetterWriter>("LetterWriters_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LetterWriter> LetterWriters_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.LetterWriter>("LetterWriters_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LocationType> LocationTypes_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.LocationType>("LocationTypes_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LocationType> LocationTypes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.LocationType>("LocationTypes_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LocationType> LocationTypes_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.LocationType>("LocationTypes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.MailCode> MailCodes_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.MailCode>("MailCodes_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.MailCode> MailCodes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.MailCode>("MailCodes_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.MailCode> MailCodes_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.MailCode>("MailCodes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.NLAddressOrderType> NLAddressOrderTypes_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.NLAddressOrderType>("NLAddressOrderTypes_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.NLAddressOrderType> NLAddressOrderTypes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.NLAddressOrderType>("NLAddressOrderTypes_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.NLAddressOrderType> NLAddressOrderTypes_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.NLAddressOrderType>("NLAddressOrderTypes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PersonType> PersonTypes_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.PersonType>("PersonTypes_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PersonType> PersonTypes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.PersonType>("PersonTypes_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PersonType> PersonTypes_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.PersonType>("PersonTypes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Prison> Prisons_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Prison>("Prisons_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Prison> Prisons_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Prison>("Prisons_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Prison> Prisons_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.Prison>("Prisons_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PrisonSex> PrisonSexes_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.PrisonSex>("PrisonSexes_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PrisonSex> PrisonSexes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.PrisonSex>("PrisonSexes_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PrisonSex> PrisonSexes_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.PrisonSex>("PrisonSexes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PurposeType> PurposeTypes_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.PurposeType>("PurposeTypes_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PurposeType> PurposeTypes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.PurposeType>("PurposeTypes_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PurposeType> PurposeTypes_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.PurposeType>("PurposeTypes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.ResponseType> ResponseTypes_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.ResponseType>("ResponseTypes_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.ResponseType> ResponseTypes_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.ResponseType>("ResponseTypes_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.ResponseType> ResponseTypes_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.ResponseType>("ResponseTypes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.sysdiagram> sysdiagrams_Single(string frameworkOperators, global::System.Nullable<int> diagram_id)
        {
            return this.GetQuery<global::PPTData.Implementation.sysdiagram>("sysdiagrams_Single", frameworkOperators, diagram_id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.sysdiagram> sysdiagrams_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> diagram_id)
        {
            return this.GetQuery<global::PPTData.Implementation.sysdiagram>("sysdiagrams_SingleOrDefault", frameworkOperators, diagram_id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.sysdiagram> sysdiagrams_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.sysdiagram>("sysdiagrams_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Title> Titles_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Title>("Titles_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Title> Titles_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Title>("Titles_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Title> Titles_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.Title>("Titles_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Town> Towns_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Town>("Towns_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Town> Towns_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.Town>("Towns_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Town> Towns_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.Town>("Towns_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopPrison> WorkshopPrisons_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.WorkshopPrison>("WorkshopPrisons_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopPrison> WorkshopPrisons_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.WorkshopPrison>("WorkshopPrisons_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopPrison> WorkshopPrisons_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.WorkshopPrison>("WorkshopPrisons_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopTeacher> WorkshopTeachers_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.WorkshopTeacher>("WorkshopTeachers_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopTeacher> WorkshopTeachers_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::PPTData.Implementation.WorkshopTeacher>("WorkshopTeachers_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopTeacher> WorkshopTeachers_All(string frameworkOperators)
        {
            return this.GetQuery<global::PPTData.Implementation.WorkshopTeacher>("WorkshopTeachers_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().PPTData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class PPTDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::PPTData.Implementation.PPTDataObjectContext>
    {
        public PPTDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Accreditation> Accreditations_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Accreditation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Accreditation>("Accreditations_All"),
                (a) => (Id.HasValue && (a.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Accreditation> Accreditations_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Accreditation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Accreditation>("Accreditations_All"),
                (a) => (Id.HasValue && (a.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Accreditation> Accreditations_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Accreditation> query;
            query = base.CreateQuery<global::PPTData.Implementation.Accreditation>("[Accreditations]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.c_Class> Classes_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.c_Class> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.c_Class>("Classes_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.c_Class> Classes_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.c_Class> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.c_Class>("Classes_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.c_Class> Classes_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.c_Class> query;
            query = base.CreateQuery<global::PPTData.Implementation.c_Class>("[Classes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Contact> Contacts_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Contact> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Contact>("Contacts_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Contact> Contacts_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Contact> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Contact>("Contacts_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Contact> Contacts_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Contact> query;
            query = base.CreateQuery<global::PPTData.Implementation.Contact>("[Contacts]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Corresp> Corresps_Single(global::System.Nullable<int> Corref)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Corresp> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Corresp>("Corresps_All"),
                (c) => (Corref.HasValue && (c.Corref == Corref)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Corresp> Corresps_SingleOrDefault(global::System.Nullable<int> Corref)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Corresp> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Corresp>("Corresps_All"),
                (c) => (Corref.HasValue && (c.Corref == Corref)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Corresp> Corresps_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Corresp> query;
            query = base.CreateQuery<global::PPTData.Implementation.Corresp>("[Corresps]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Country> Countries_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Country> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Country>("Countries_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Country> Countries_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Country> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Country>("Countries_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Country> Countries_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Country> query;
            query = base.CreateQuery<global::PPTData.Implementation.Country>("[Countries]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Destination> Destinations_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Destination> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Destination>("Destinations_All"),
                (d) => (Id.HasValue && (d.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Destination> Destinations_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Destination> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Destination>("Destinations_All"),
                (d) => (Id.HasValue && (d.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Destination> Destinations_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Destination> query;
            query = base.CreateQuery<global::PPTData.Implementation.Destination>("[Destinations]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Gift> Gifts_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Gift> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Gift>("Gifts_All"),
                (g) => (Id.HasValue && (g.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Gift> Gifts_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Gift> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Gift>("Gifts_All"),
                (g) => (Id.HasValue && (g.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Gift> Gifts_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Gift> query;
            query = base.CreateQuery<global::PPTData.Implementation.Gift>("[Gifts]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.GiftType> GiftTypes_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.GiftType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.GiftType>("GiftTypes_All"),
                (g) => (Id.HasValue && (g.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.GiftType> GiftTypes_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.GiftType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.GiftType>("GiftTypes_All"),
                (g) => (Id.HasValue && (g.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.GiftType> GiftTypes_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.GiftType> query;
            query = base.CreateQuery<global::PPTData.Implementation.GiftType>("[GiftTypes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.History> Histories_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.History> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.History>("Histories_All"),
                (h) => (Id.HasValue && (h.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.History> Histories_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.History> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.History>("Histories_All"),
                (h) => (Id.HasValue && (h.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.History> Histories_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.History> query;
            query = base.CreateQuery<global::PPTData.Implementation.History>("[Histories]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.InstitutionType> InstitutionTypes_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.InstitutionType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.InstitutionType>("InstitutionTypes_All"),
                (i) => (Id.HasValue && (i.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.InstitutionType> InstitutionTypes_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.InstitutionType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.InstitutionType>("InstitutionTypes_All"),
                (i) => (Id.HasValue && (i.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.InstitutionType> InstitutionTypes_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.InstitutionType> query;
            query = base.CreateQuery<global::PPTData.Implementation.InstitutionType>("[InstitutionTypes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LetterWriter> LetterWriters_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.LetterWriter> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.LetterWriter>("LetterWriters_All"),
                (l) => (Id.HasValue && (l.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LetterWriter> LetterWriters_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.LetterWriter> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.LetterWriter>("LetterWriters_All"),
                (l) => (Id.HasValue && (l.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LetterWriter> LetterWriters_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.LetterWriter> query;
            query = base.CreateQuery<global::PPTData.Implementation.LetterWriter>("[LetterWriters]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LocationType> LocationTypes_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.LocationType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.LocationType>("LocationTypes_All"),
                (l) => (Id.HasValue && (l.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LocationType> LocationTypes_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.LocationType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.LocationType>("LocationTypes_All"),
                (l) => (Id.HasValue && (l.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.LocationType> LocationTypes_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.LocationType> query;
            query = base.CreateQuery<global::PPTData.Implementation.LocationType>("[LocationTypes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.MailCode> MailCodes_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.MailCode> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.MailCode>("MailCodes_All"),
                (m) => (Id.HasValue && (m.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.MailCode> MailCodes_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.MailCode> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.MailCode>("MailCodes_All"),
                (m) => (Id.HasValue && (m.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.MailCode> MailCodes_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.MailCode> query;
            query = base.CreateQuery<global::PPTData.Implementation.MailCode>("[MailCodes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.NLAddressOrderType> NLAddressOrderTypes_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.NLAddressOrderType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.NLAddressOrderType>("NLAddressOrderTypes_All"),
                (n) => (Id.HasValue && (n.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.NLAddressOrderType> NLAddressOrderTypes_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.NLAddressOrderType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.NLAddressOrderType>("NLAddressOrderTypes_All"),
                (n) => (Id.HasValue && (n.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.NLAddressOrderType> NLAddressOrderTypes_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.NLAddressOrderType> query;
            query = base.CreateQuery<global::PPTData.Implementation.NLAddressOrderType>("[NLAddressOrderTypes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PersonType> PersonTypes_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.PersonType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.PersonType>("PersonTypes_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PersonType> PersonTypes_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.PersonType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.PersonType>("PersonTypes_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PersonType> PersonTypes_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.PersonType> query;
            query = base.CreateQuery<global::PPTData.Implementation.PersonType>("[PersonTypes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Prison> Prisons_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Prison> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Prison>("Prisons_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Prison> Prisons_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Prison> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Prison>("Prisons_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Prison> Prisons_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Prison> query;
            query = base.CreateQuery<global::PPTData.Implementation.Prison>("[Prisons]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PrisonSex> PrisonSexes_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.PrisonSex> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.PrisonSex>("PrisonSexes_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PrisonSex> PrisonSexes_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.PrisonSex> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.PrisonSex>("PrisonSexes_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PrisonSex> PrisonSexes_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.PrisonSex> query;
            query = base.CreateQuery<global::PPTData.Implementation.PrisonSex>("[PrisonSexes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PurposeType> PurposeTypes_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.PurposeType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.PurposeType>("PurposeTypes_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PurposeType> PurposeTypes_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.PurposeType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.PurposeType>("PurposeTypes_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.PurposeType> PurposeTypes_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.PurposeType> query;
            query = base.CreateQuery<global::PPTData.Implementation.PurposeType>("[PurposeTypes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.ResponseType> ResponseTypes_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.ResponseType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.ResponseType>("ResponseTypes_All"),
                (r) => (Id.HasValue && (r.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.ResponseType> ResponseTypes_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.ResponseType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.ResponseType>("ResponseTypes_All"),
                (r) => (Id.HasValue && (r.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.ResponseType> ResponseTypes_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.ResponseType> query;
            query = base.CreateQuery<global::PPTData.Implementation.ResponseType>("[ResponseTypes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.sysdiagram> sysdiagrams_Single(global::System.Nullable<int> diagram_id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.sysdiagram> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.sysdiagram>("sysdiagrams_All"),
                (s) => (diagram_id.HasValue && (s.diagram_id == diagram_id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.sysdiagram> sysdiagrams_SingleOrDefault(global::System.Nullable<int> diagram_id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.sysdiagram> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.sysdiagram>("sysdiagrams_All"),
                (s) => (diagram_id.HasValue && (s.diagram_id == diagram_id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.sysdiagram> sysdiagrams_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.sysdiagram> query;
            query = base.CreateQuery<global::PPTData.Implementation.sysdiagram>("[sysdiagrams]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Title> Titles_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Title> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Title>("Titles_All"),
                (t) => (Id.HasValue && (t.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Title> Titles_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Title> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Title>("Titles_All"),
                (t) => (Id.HasValue && (t.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Title> Titles_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Title> query;
            query = base.CreateQuery<global::PPTData.Implementation.Title>("[Titles]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Town> Towns_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Town> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Town>("Towns_All"),
                (t) => (Id.HasValue && (t.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Town> Towns_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Town> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.Town>("Towns_All"),
                (t) => (Id.HasValue && (t.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.Town> Towns_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.Town> query;
            query = base.CreateQuery<global::PPTData.Implementation.Town>("[Towns]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopPrison> WorkshopPrisons_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopPrison> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.WorkshopPrison>("WorkshopPrisons_All"),
                (w) => (Id.HasValue && (w.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopPrison> WorkshopPrisons_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopPrison> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.WorkshopPrison>("WorkshopPrisons_All"),
                (w) => (Id.HasValue && (w.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopPrison> WorkshopPrisons_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopPrison> query;
            query = base.CreateQuery<global::PPTData.Implementation.WorkshopPrison>("[WorkshopPrisons]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopTeacher> WorkshopTeachers_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopTeacher> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.WorkshopTeacher>("WorkshopTeachers_All"),
                (w) => (Id.HasValue && (w.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopTeacher> WorkshopTeachers_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopTeacher> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::PPTData.Implementation.WorkshopTeacher>("WorkshopTeachers_All"),
                (w) => (Id.HasValue && (w.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopTeacher> WorkshopTeachers_All()
        {
            global::System.Linq.IQueryable<global::PPTData.Implementation.WorkshopTeacher> query;
            query = base.CreateQuery<global::PPTData.Implementation.WorkshopTeacher>("[WorkshopTeachers]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::PPTData.Implementation.Accreditation))
            {
                return new global::PPTData.Implementation.Accreditation();
            }
            if (type == typeof(global::PPTData.Implementation.c_Class))
            {
                return new global::PPTData.Implementation.c_Class();
            }
            if (type == typeof(global::PPTData.Implementation.Contact))
            {
                return new global::PPTData.Implementation.Contact();
            }
            if (type == typeof(global::PPTData.Implementation.Corresp))
            {
                return new global::PPTData.Implementation.Corresp();
            }
            if (type == typeof(global::PPTData.Implementation.Country))
            {
                return new global::PPTData.Implementation.Country();
            }
            if (type == typeof(global::PPTData.Implementation.Destination))
            {
                return new global::PPTData.Implementation.Destination();
            }
            if (type == typeof(global::PPTData.Implementation.Gift))
            {
                return new global::PPTData.Implementation.Gift();
            }
            if (type == typeof(global::PPTData.Implementation.GiftType))
            {
                return new global::PPTData.Implementation.GiftType();
            }
            if (type == typeof(global::PPTData.Implementation.History))
            {
                return new global::PPTData.Implementation.History();
            }
            if (type == typeof(global::PPTData.Implementation.InstitutionType))
            {
                return new global::PPTData.Implementation.InstitutionType();
            }
            if (type == typeof(global::PPTData.Implementation.LetterWriter))
            {
                return new global::PPTData.Implementation.LetterWriter();
            }
            if (type == typeof(global::PPTData.Implementation.LocationType))
            {
                return new global::PPTData.Implementation.LocationType();
            }
            if (type == typeof(global::PPTData.Implementation.MailCode))
            {
                return new global::PPTData.Implementation.MailCode();
            }
            if (type == typeof(global::PPTData.Implementation.NLAddressOrderType))
            {
                return new global::PPTData.Implementation.NLAddressOrderType();
            }
            if (type == typeof(global::PPTData.Implementation.PersonType))
            {
                return new global::PPTData.Implementation.PersonType();
            }
            if (type == typeof(global::PPTData.Implementation.Prison))
            {
                return new global::PPTData.Implementation.Prison();
            }
            if (type == typeof(global::PPTData.Implementation.PrisonSex))
            {
                return new global::PPTData.Implementation.PrisonSex();
            }
            if (type == typeof(global::PPTData.Implementation.PurposeType))
            {
                return new global::PPTData.Implementation.PurposeType();
            }
            if (type == typeof(global::PPTData.Implementation.ResponseType))
            {
                return new global::PPTData.Implementation.ResponseType();
            }
            if (type == typeof(global::PPTData.Implementation.sysdiagram))
            {
                return new global::PPTData.Implementation.sysdiagram();
            }
            if (type == typeof(global::PPTData.Implementation.Title))
            {
                return new global::PPTData.Implementation.Title();
            }
            if (type == typeof(global::PPTData.Implementation.Town))
            {
                return new global::PPTData.Implementation.Town();
            }
            if (type == typeof(global::PPTData.Implementation.WorkshopPrison))
            {
                return new global::PPTData.Implementation.WorkshopPrison();
            }
            if (type == typeof(global::PPTData.Implementation.WorkshopTeacher))
            {
                return new global::PPTData.Implementation.WorkshopTeacher();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::PPTData.Implementation.PPTDataObjectContext CreateObjectContext()
        {
            return new global::PPTData.Implementation.PPTDataObjectContext(base.GetEntityConnectionString(
                "PPTData", 
                "res://*/PPTData.csdl|res://*/PPTData.ssdl|res://*/PPTData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Accreditation))
            {
                return new global::PPTData.Implementation.Accreditation();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.c_Class))
            {
                return new global::PPTData.Implementation.c_Class();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Contact))
            {
                return new global::PPTData.Implementation.Contact();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Corresp))
            {
                return new global::PPTData.Implementation.Corresp();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Country))
            {
                return new global::PPTData.Implementation.Country();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Destination))
            {
                return new global::PPTData.Implementation.Destination();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Gift))
            {
                return new global::PPTData.Implementation.Gift();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.GiftType))
            {
                return new global::PPTData.Implementation.GiftType();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.History))
            {
                return new global::PPTData.Implementation.History();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.InstitutionType))
            {
                return new global::PPTData.Implementation.InstitutionType();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.LetterWriter))
            {
                return new global::PPTData.Implementation.LetterWriter();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.LocationType))
            {
                return new global::PPTData.Implementation.LocationType();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.MailCode))
            {
                return new global::PPTData.Implementation.MailCode();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.NLAddressOrderType))
            {
                return new global::PPTData.Implementation.NLAddressOrderType();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.PersonType))
            {
                return new global::PPTData.Implementation.PersonType();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Prison))
            {
                return new global::PPTData.Implementation.Prison();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.PrisonSex))
            {
                return new global::PPTData.Implementation.PrisonSex();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.PurposeType))
            {
                return new global::PPTData.Implementation.PurposeType();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ResponseType))
            {
                return new global::PPTData.Implementation.ResponseType();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.sysdiagram))
            {
                return new global::PPTData.Implementation.sysdiagram();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Title))
            {
                return new global::PPTData.Implementation.Title();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Town))
            {
                return new global::PPTData.Implementation.Town();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.WorkshopPrison))
            {
                return new global::PPTData.Implementation.WorkshopPrison();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.WorkshopTeacher))
            {
                return new global::PPTData.Implementation.WorkshopTeacher();
            }
            return null;
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.ApplicationData))
            {
                return new global::LightSwitchApplication.ApplicationDataService();
            }
            if (dataServiceType == typeof(global::LightSwitchApplication.PPTData))
            {
                return new global::LightSwitchApplication.PPTDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.ApplicationData))
            {
                return new global::LightSwitchApplication.Implementation.ApplicationDataServiceImplementation(dataService);
            }
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.PPTData))
            {
                return new global::LightSwitchApplication.Implementation.PPTDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.Contacts) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.Contacts);
            }
            if (typeof(global::LightSwitchApplication.ContactTypes) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.ContactTypes);
            }
            if (typeof(global::LightSwitchApplication.Countries) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.Countries);
            }
            if (typeof(global::LightSwitchApplication.Prisoner) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.Prisoner);
            }
            if (typeof(global::LightSwitchApplication.Accreditation) == definitionType)
            {
                return typeof(global::PPTData.Implementation.Accreditation);
            }
            if (typeof(global::LightSwitchApplication.c_Class) == definitionType)
            {
                return typeof(global::PPTData.Implementation.c_Class);
            }
            if (typeof(global::LightSwitchApplication.Contact) == definitionType)
            {
                return typeof(global::PPTData.Implementation.Contact);
            }
            if (typeof(global::LightSwitchApplication.Corresp) == definitionType)
            {
                return typeof(global::PPTData.Implementation.Corresp);
            }
            if (typeof(global::LightSwitchApplication.Country) == definitionType)
            {
                return typeof(global::PPTData.Implementation.Country);
            }
            if (typeof(global::LightSwitchApplication.Destination) == definitionType)
            {
                return typeof(global::PPTData.Implementation.Destination);
            }
            if (typeof(global::LightSwitchApplication.Gift) == definitionType)
            {
                return typeof(global::PPTData.Implementation.Gift);
            }
            if (typeof(global::LightSwitchApplication.GiftType) == definitionType)
            {
                return typeof(global::PPTData.Implementation.GiftType);
            }
            if (typeof(global::LightSwitchApplication.History) == definitionType)
            {
                return typeof(global::PPTData.Implementation.History);
            }
            if (typeof(global::LightSwitchApplication.InstitutionType) == definitionType)
            {
                return typeof(global::PPTData.Implementation.InstitutionType);
            }
            if (typeof(global::LightSwitchApplication.LetterWriter) == definitionType)
            {
                return typeof(global::PPTData.Implementation.LetterWriter);
            }
            if (typeof(global::LightSwitchApplication.LocationType) == definitionType)
            {
                return typeof(global::PPTData.Implementation.LocationType);
            }
            if (typeof(global::LightSwitchApplication.MailCode) == definitionType)
            {
                return typeof(global::PPTData.Implementation.MailCode);
            }
            if (typeof(global::LightSwitchApplication.NLAddressOrderType) == definitionType)
            {
                return typeof(global::PPTData.Implementation.NLAddressOrderType);
            }
            if (typeof(global::LightSwitchApplication.PersonType) == definitionType)
            {
                return typeof(global::PPTData.Implementation.PersonType);
            }
            if (typeof(global::LightSwitchApplication.Prison) == definitionType)
            {
                return typeof(global::PPTData.Implementation.Prison);
            }
            if (typeof(global::LightSwitchApplication.PrisonSex) == definitionType)
            {
                return typeof(global::PPTData.Implementation.PrisonSex);
            }
            if (typeof(global::LightSwitchApplication.PurposeType) == definitionType)
            {
                return typeof(global::PPTData.Implementation.PurposeType);
            }
            if (typeof(global::LightSwitchApplication.ResponseType) == definitionType)
            {
                return typeof(global::PPTData.Implementation.ResponseType);
            }
            if (typeof(global::LightSwitchApplication.sysdiagram) == definitionType)
            {
                return typeof(global::PPTData.Implementation.sysdiagram);
            }
            if (typeof(global::LightSwitchApplication.Title) == definitionType)
            {
                return typeof(global::PPTData.Implementation.Title);
            }
            if (typeof(global::LightSwitchApplication.Town) == definitionType)
            {
                return typeof(global::PPTData.Implementation.Town);
            }
            if (typeof(global::LightSwitchApplication.WorkshopPrison) == definitionType)
            {
                return typeof(global::PPTData.Implementation.WorkshopPrison);
            }
            if (typeof(global::LightSwitchApplication.WorkshopTeacher) == definitionType)
            {
                return typeof(global::PPTData.Implementation.WorkshopTeacher);
            }
            return null;
        }
    }
}

namespace ApplicationData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::ApplicationData.Implementation.Contacts.Metadata))]
    public partial class Contacts :
        global::LightSwitchApplication.Contacts.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Contacts.DetailsClass.IImplementation.PersonType
        {
            get
            {
                return this.PersonType;
            }
            set
            {
                this.PersonType = (global::ApplicationData.Implementation.ContactTypes)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("PersonType");
                }
            }
        }
        
        partial void OnContacts_ContactTypesChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("PersonType");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Contacts.DetailsClass.IImplementation.Country
        {
            get
            {
                return this.Country;
            }
            set
            {
                this.Country = (global::ApplicationData.Implementation.Countries)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Country");
                }
            }
        }
        
        partial void OnContacts_CountriesChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Country");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Contacts.DetailsClass.IImplementation.Prisoner
        {
            get
            {
                return this.Prisoner;
            }
            set
            {
                this.Prisoner = (global::ApplicationData.Implementation.Prisoner)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Prisoner");
                }
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.ContactTypes PersonType { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Countries Country { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Prisoner Prisoner { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ContactTypes :
        global::LightSwitchApplication.ContactTypes.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.ContactTypes.DetailsClass.IImplementation.ContactsCollection
        {
            get
            {
                return this.ContactsCollection;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Countries :
        global::LightSwitchApplication.Countries.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Countries.DetailsClass.IImplementation.ContactsCollection
        {
            get
            {
                return this.ContactsCollection;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::ApplicationData.Implementation.Prisoner.Metadata))]
    public partial class Prisoner :
        global::LightSwitchApplication.Prisoner.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Prisoner.DetailsClass.IImplementation.ContactId
        {
            get
            {
                return this.ContactId;
            }
            set
            {
                this.ContactId = (global::ApplicationData.Implementation.Contacts)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("ContactId");
                }
            }
        }
        
        partial void OnIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("ContactId");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Contacts ContactId { get; set; }
        
        }
    }
    
}

namespace PPTData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::PPTData.Implementation.Accreditation.Metadata))]
    public partial class Accreditation :
        global::LightSwitchApplication.Accreditation.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Accreditation.DetailsClass.IImplementation.Contact
        {
            get
            {
                return this.Contact;
            }
            set
            {
                this.Contact = (global::PPTData.Implementation.Contact)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Contact");
                }
            }
        }
        
        partial void OnTeacherIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Contact");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Contact Contact { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::PPTData.Implementation.c_Class.Metadata))]
    public partial class c_Class :
        global::LightSwitchApplication.c_Class.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.c_Class.DetailsClass.IImplementation.Contact
        {
            get
            {
                return this.Contact;
            }
            set
            {
                this.Contact = (global::PPTData.Implementation.Contact)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Contact");
                }
            }
        }
        
        partial void OnTeacherIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Contact");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.c_Class.DetailsClass.IImplementation.Prison
        {
            get
            {
                return this.Prison;
            }
            set
            {
                this.Prison = (global::PPTData.Implementation.Prison)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Prison");
                }
            }
        }
        
        partial void OnPrisonIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Prison");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Contact Contact { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Prison Prison { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::PPTData.Implementation.Contact.Metadata))]
    public partial class Contact :
        global::LightSwitchApplication.Contact.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Contact.DetailsClass.IImplementation.Accreditations
        {
            get
            {
                return this.Accreditations;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Contact.DetailsClass.IImplementation.Classes
        {
            get
            {
                return this.Classes;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Contact.DetailsClass.IImplementation.Country1
        {
            get
            {
                return this.Country1;
            }
            set
            {
                this.Country1 = (global::PPTData.Implementation.Country)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Country1");
                }
            }
        }
        
        partial void OnCountryChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Country1");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Contact.DetailsClass.IImplementation.MailCode1
        {
            get
            {
                return this.MailCode1;
            }
            set
            {
                this.MailCode1 = (global::PPTData.Implementation.MailCode)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("MailCode1");
                }
            }
        }
        
        partial void OnMailCodeChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("MailCode1");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Contact.DetailsClass.IImplementation.PersonType1
        {
            get
            {
                return this.PersonType1;
            }
            set
            {
                this.PersonType1 = (global::PPTData.Implementation.PersonType)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("PersonType1");
                }
            }
        }
        
        partial void OnPersonTypeChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("PersonType1");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Contact.DetailsClass.IImplementation.Prison1
        {
            get
            {
                return this.Prison1;
            }
            set
            {
                this.Prison1 = (global::PPTData.Implementation.Prison)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Prison1");
                }
            }
        }
        
        partial void OnPrisonChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Prison1");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Contact.DetailsClass.IImplementation.Title1
        {
            get
            {
                return this.Title1;
            }
            set
            {
                this.Title1 = (global::PPTData.Implementation.Title)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Title1");
                }
            }
        }
        
        partial void OnTitleChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Title1");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Contact.DetailsClass.IImplementation.Town1
        {
            get
            {
                return this.Town1;
            }
            set
            {
                this.Town1 = (global::PPTData.Implementation.Town)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Town1");
                }
            }
        }
        
        partial void OnTownChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Town1");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Contact.DetailsClass.IImplementation.Corresp
        {
            get
            {
                return this.Corresp;
            }
            set
            {
                this.Corresp = (global::PPTData.Implementation.Corresp)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Corresp");
                }
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Contact.DetailsClass.IImplementation.Gifts
        {
            get
            {
                return this.Gifts;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Contact.DetailsClass.IImplementation.WorkshopTeachers
        {
            get
            {
                return this.WorkshopTeachers;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Country Country1 { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.MailCode MailCode1 { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.PersonType PersonType1 { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Prison Prison1 { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Title Title1 { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Town Town1 { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Corresp Corresp { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::PPTData.Implementation.Corresp.Metadata))]
    public partial class Corresp :
        global::LightSwitchApplication.Corresp.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Corresp.DetailsClass.IImplementation.ResponseType
        {
            get
            {
                return this.ResponseType;
            }
            set
            {
                this.ResponseType = (global::PPTData.Implementation.ResponseType)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("ResponseType");
                }
            }
        }
        
        partial void OnResponseChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("ResponseType");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Corresp.DetailsClass.IImplementation.Contact
        {
            get
            {
                return this.Contact;
            }
            set
            {
                this.Contact = (global::PPTData.Implementation.Contact)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Contact");
                }
            }
        }
        
        partial void OnCorrefChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Contact");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.ResponseType ResponseType { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Contact Contact { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Country :
        global::LightSwitchApplication.Country.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Country.DetailsClass.IImplementation.Contacts
        {
            get
            {
                return this.Contacts;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Country.DetailsClass.IImplementation.Prisons
        {
            get
            {
                return this.Prisons;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Destination :
        global::LightSwitchApplication.Destination.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::PPTData.Implementation.Gift.Metadata))]
    public partial class Gift :
        global::LightSwitchApplication.Gift.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Gift.DetailsClass.IImplementation.Contact1
        {
            get
            {
                return this.Contact1;
            }
            set
            {
                this.Contact1 = (global::PPTData.Implementation.Contact)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Contact1");
                }
            }
        }
        
        partial void OnContactChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Contact1");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Contact Contact1 { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class GiftType :
        global::LightSwitchApplication.GiftType.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class History :
        global::LightSwitchApplication.History.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class InstitutionType :
        global::LightSwitchApplication.InstitutionType.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class LetterWriter :
        global::LightSwitchApplication.LetterWriter.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class LocationType :
        global::LightSwitchApplication.LocationType.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.LocationType.DetailsClass.IImplementation.Prisons
        {
            get
            {
                return this.Prisons;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class MailCode :
        global::LightSwitchApplication.MailCode.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.MailCode.DetailsClass.IImplementation.Contacts
        {
            get
            {
                return this.Contacts;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class NLAddressOrderType :
        global::LightSwitchApplication.NLAddressOrderType.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.NLAddressOrderType.DetailsClass.IImplementation.Prisons
        {
            get
            {
                return this.Prisons;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class PersonType :
        global::LightSwitchApplication.PersonType.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.PersonType.DetailsClass.IImplementation.Contacts
        {
            get
            {
                return this.Contacts;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::PPTData.Implementation.Prison.Metadata))]
    public partial class Prison :
        global::LightSwitchApplication.Prison.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Prison.DetailsClass.IImplementation.Classes
        {
            get
            {
                return this.Classes;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Prison.DetailsClass.IImplementation.Contacts
        {
            get
            {
                return this.Contacts;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Prison.DetailsClass.IImplementation.Country1
        {
            get
            {
                return this.Country1;
            }
            set
            {
                this.Country1 = (global::PPTData.Implementation.Country)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Country1");
                }
            }
        }
        
        partial void OnCountryChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Country1");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Prison.DetailsClass.IImplementation.LocationType
        {
            get
            {
                return this.LocationType;
            }
            set
            {
                this.LocationType = (global::PPTData.Implementation.LocationType)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("LocationType");
                }
            }
        }
        
        partial void OnLocationChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("LocationType");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Prison.DetailsClass.IImplementation.NLAddressOrderType
        {
            get
            {
                return this.NLAddressOrderType;
            }
            set
            {
                this.NLAddressOrderType = (global::PPTData.Implementation.NLAddressOrderType)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("NLAddressOrderType");
                }
            }
        }
        
        partial void OnNlAddressOrderChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("NLAddressOrderType");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Prison.DetailsClass.IImplementation.PrisonSex
        {
            get
            {
                return this.PrisonSex;
            }
            set
            {
                this.PrisonSex = (global::PPTData.Implementation.PrisonSex)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("PrisonSex");
                }
            }
        }
        
        partial void OnSexChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("PrisonSex");
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Prison.DetailsClass.IImplementation.WorkshopPrisons
        {
            get
            {
                return this.WorkshopPrisons;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Country Country1 { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.LocationType LocationType { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.NLAddressOrderType NLAddressOrderType { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.PrisonSex PrisonSex { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class PrisonSex :
        global::LightSwitchApplication.PrisonSex.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.PrisonSex.DetailsClass.IImplementation.Prisons
        {
            get
            {
                return this.Prisons;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class PurposeType :
        global::LightSwitchApplication.PurposeType.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ResponseType :
        global::LightSwitchApplication.ResponseType.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.ResponseType.DetailsClass.IImplementation.Corresps
        {
            get
            {
                return this.Corresps;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class sysdiagram :
        global::LightSwitchApplication.sysdiagram.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Title :
        global::LightSwitchApplication.Title.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Title.DetailsClass.IImplementation.Contacts
        {
            get
            {
                return this.Contacts;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Town :
        global::LightSwitchApplication.Town.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Town.DetailsClass.IImplementation.Contacts
        {
            get
            {
                return this.Contacts;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::PPTData.Implementation.WorkshopPrison.Metadata))]
    public partial class WorkshopPrison :
        global::LightSwitchApplication.WorkshopPrison.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.WorkshopPrison.DetailsClass.IImplementation.Prison
        {
            get
            {
                return this.Prison;
            }
            set
            {
                this.Prison = (global::PPTData.Implementation.Prison)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Prison");
                }
            }
        }
        
        partial void OnPrisonIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Prison");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Prison Prison { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::PPTData.Implementation.WorkshopTeacher.Metadata))]
    public partial class WorkshopTeacher :
        global::LightSwitchApplication.WorkshopTeacher.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.WorkshopTeacher.DetailsClass.IImplementation.Contact
        {
            get
            {
                return this.Contact;
            }
            set
            {
                this.Contact = (global::PPTData.Implementation.Contact)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Contact");
                }
            }
        }
        
        partial void OnTeacherIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Contact");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::PPTData.Implementation.Contact Contact { get; set; }
        
        }
    }
    
}

